From ea146a4d834071c02ec6a204bdd8116396d1396c Mon Sep 17 00:00:00 2001
From: Rokis <ghost1988102@gmail.com>
Date: Sun, 5 Jul 2020 08:10:38 +0800
Subject: [PATCH 055/122] mke2fs: add arg -p(printmode), output without special
 chars.

Signed-off-by: Rokis <ghost1988102@gmail.com>
---
 release/src/router/e2fsprogs/misc/mke2fs.c | 52 +++++++++++++++++-----
 1 file changed, 42 insertions(+), 10 deletions(-)

diff --git a/release/src/router/e2fsprogs/misc/mke2fs.c b/release/src/router/e2fsprogs/misc/mke2fs.c
index 27e7d174e2..514835a622 100644
--- a/release/src/router/e2fsprogs/misc/mke2fs.c
+++ b/release/src/router/e2fsprogs/misc/mke2fs.c
@@ -82,6 +82,7 @@ static const char * device_name /* = NULL */;
 /* Command line options */
 static int	cflag;
 int	verbose;
+int printmode; /* output without special characters */
 int	quiet;
 static int	super_only;
 static int	discard = 1;	/* attempt to discard device before fs creation */
@@ -416,9 +417,13 @@ static void write_inode_tables(ext2_filsys fs, int lazy_flag, int itable_zeroed)
 	int		num;
 	struct ext2fs_numeric_progress_struct progress;
 
-	ext2fs_numeric_progress_init(fs, &progress,
+	if (!printmode) {
+		ext2fs_numeric_progress_init(fs, &progress,
 				     _("Writing inode tables: "),
 				     fs->group_desc_count);
+	} else {
+		printf("%s", _("Writing inode tables: "));
+	}
 
 	for (i = 0; i < fs->group_desc_count; i++) {
 		ext2fs_numeric_progress_update(fs, &progress, i);
@@ -452,8 +457,12 @@ static void write_inode_tables(ext2_filsys fs, int lazy_flag, int itable_zeroed)
 				io_channel_flush(fs->io);
 		}
 	}
-	ext2fs_numeric_progress_close(fs, &progress,
+	if (!printmode) {
+		ext2fs_numeric_progress_close(fs, &progress,
 				      _("done                            \n"));
+	} else {
+		printf("%s", _("done\n"));
+	}
 
 	/* Reserved inodes must always have correct checksums */
 	if (ext2fs_has_feature_metadata_csum(fs->super))
@@ -616,9 +625,14 @@ static void create_journal_dev(ext2_filsys fs)
 	if (journal_flags & EXT2_MKJOURNAL_LAZYINIT)
 		goto write_superblock;
 
-	ext2fs_numeric_progress_init(fs, &progress,
+	if (!printmode) {
+		ext2fs_numeric_progress_init(fs, &progress,
 				     _("Zeroing journal device: "),
 				     ext2fs_blocks_count(fs->super));
+	} else {
+		printf("%s", _("Writing inode tables: "));
+	}
+
 	blk = 0;
 	count = ext2fs_blocks_count(fs->super);
 	while (count > 0) {
@@ -639,7 +653,8 @@ static void create_journal_dev(ext2_filsys fs)
 		ext2fs_numeric_progress_update(fs, &progress, blk);
 	}
 
-	ext2fs_numeric_progress_close(fs, &progress, NULL);
+	if (!printmode)
+		ext2fs_numeric_progress_close(fs, &progress, NULL);
 write_superblock:
 	retval = io_channel_write_blk64(fs->io,
 					fs->super->s_first_data_block+1,
@@ -1628,7 +1643,7 @@ profile_error:
 	}
 
 	while ((c = getopt (argc, argv,
-		    "b:cd:e:g:i:jl:m:no:qr:s:t:vC:DE:FG:I:J:KL:M:N:O:R:ST:U:Vz:")) != EOF) {
+		    "b:cd:e:g:i:jl:m:no:pqr:s:t:vC:DE:FG:I:J:KL:M:N:O:R:ST:U:Vz:")) != EOF) {
 		switch (c) {
 		case 'b':
 			blocksize = parse_num_blocks2(optarg, -1);
@@ -1819,6 +1834,9 @@ profile_error:
 			strcat(fs_features, optarg);
 			fs_features_size += 1 + strlen(optarg);
 			break;
+		case 'p':
+			printmode = 1;
+			break;
 		case 'q':
 			quiet = 1;
 			break;
@@ -2782,9 +2800,14 @@ static int mke2fs_discard_device(ext2_filsys fs)
 	count *= (1024 * 1024);
 	count /= fs->blocksize;
 
-	ext2fs_numeric_progress_init(fs, &progress,
+	if (!printmode) {
+		ext2fs_numeric_progress_init(fs, &progress,
 				     _("Discarding device blocks: "),
 				     blocks);
+	} else {
+		printf("%s", _("Writing inode tables: "));
+	}
+
 	while (cur < blocks) {
 		ext2fs_numeric_progress_update(fs, &progress, cur);
 
@@ -2798,13 +2821,22 @@ static int mke2fs_discard_device(ext2_filsys fs)
 	}
 
 	if (retval) {
-		ext2fs_numeric_progress_close(fs, &progress,
+		if (!printmode) {
+			ext2fs_numeric_progress_close(fs, &progress,
 				      _("failed - "));
+		} else {
+			printf("%s\n", _("failed - "));
+		}
 		if (!quiet)
 			printf("%s\n",error_message(retval));
-	} else
-		ext2fs_numeric_progress_close(fs, &progress,
+	} else {
+		if (!printmode) {
+			ext2fs_numeric_progress_close(fs, &progress,
 				      _("done                            \n"));
+		} else {
+			printf("%s\n", _("done\n"));
+		}
+	}
 
 	return retval;
 }
@@ -2959,7 +2991,7 @@ int main (int argc, char *argv[])
 	 * or whatever we've written so far.  The quiet flag disables
 	 * this, along with a lot of other output.
 	 */
-	if (!quiet)
+	if (!quiet && !printmode)
 		flags |= EXT2_FLAG_PRINT_PROGRESS;
 	if (android_sparse_file) {
 		char *android_sparse_params = malloc(strlen(device_name) + 48);
-- 
2.25.1

